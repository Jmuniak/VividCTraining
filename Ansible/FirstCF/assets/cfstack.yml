AWSTemplateFormatVersion: 2010-09-09
Description: Ansible deployment of Stack=(Lambda, DynamoTable, RestApi, ApiGateway, ApiMethod, ApiGateway-Deployment, ApiGatewayPermission, IAMRole for lambda)

Parameters:
  LambdaFuncName:
    Type: String
    Default: Lambda_api-lambda-db
  DynamoDBTableName:
    Type: String
    Default: Dynamo_api-lambda-db
  APIName:
    Type: String
    Default: API_api-lambda-db
  EnvironmentName:
    Type: String
    Default: Demo


Resources:
  LambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          console.log('Loading DynamoDB Lambda function');
          const AWS = require('aws-sdk');
          # const whizlabsXRay = require('aws-xray-sdk-core');
          let dynamo = new AWS.DynamoDB.DocumentClient();
          exports.handler = function(event, context, callback) {
          console.log('Received event:', JSON.stringify(event, null, 2));
          let operation = event.operation;
          if (event.tableName) {
            event.payload.TableName = event.tableName;
          }
          switch (operation) {
                case 'create':
                    dynamo.put(event.payload, callback);
                    break;
                case 'read':
                    dynamo.get(event.payload, callback);
                    break;
                case 'update':
                    dynamo.update(event.payload, callback);
                    break;
                case 'delete':
                    dynamo.delete(event.payload, callback);
                    break;
                case 'list':
                    dynamo.scan(event.payload, callback);
                    break;
                default:
                    callback('Unknown operation: ${operation}');
          }
          };
      FunctionName:
        Ref: LambdaFuncName
      Handler: index.handler
      Runtime: nodejs12.x
      Role: 
        - Fn::GetAtt: 
          - AMRole
          - Arn
    DependsOn:
      - DynamoDBTable
      # Why? IAM ROLE is Created First. DynamoDBTable Second. Lambda Third.


  DynamoDBTable:
  # TODO?? Add more of a table description here?
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName:
        Ref: DynamoDBTableName
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
    DependsOn: 
      - IAMRole
      # Why? IAM ROLE is Created First. DynamoDBTable Second.

  # APIGatewayRestAPI 
  APIGatewayRestAPI:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name:
        Ref: APIName
    DependsOn:
      - LambdaFunction
      # Why? IAM ROLE is Created First. DynamoDBTable Second. Lambda Third. 
      # APIGatewayRestAPI Fourth.


  APIGatewayResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      ParentId: 
        - Fn::GetAtt: 
          - APIGatewayRestAPI
          - RootResourceId
      PathPart:
        Ref: LambdaFuncName
    DependsOn:
      - APIGatewayRestAPI
      # Why? IAM ROLE is Created First. DynamoDBTable Second. Lambda Third. 
      # APIGatewayRestAPI Fourth. APIGatewayResource Fith.


  APIGatewayMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      ResourceId: !Ref APIGatewayResource
      HttpMethod: GET # Was Post but you need get to hit a lambda. Added an event trigger is also required.
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
      Integration:
        Type: AWS
        IntegrationResponses:
          - StatusCode: 200
        IntegrationHttpMethod: GET # Was Post
        Uri: !Sub
          - >-
            'arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:624164837375:function:Lambda_api-lambda-db/invocations'
          - LambdaFuncNameArn:
            Fn::GetAtt:
            - LambdaFunction
            - Arn
    DependsOn:
      - APIGatewayResource
      # Why? IAM ROLE is Created First. DynamoDBTable Second. Lambda Third. 
      # APIGatewayRestAPI Fourth. APIGatewayResource Fith. 
      # APIGatewayMethod Sixth.


  APIGatewayDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      StageName:
        Ref: EnvironmentName
    DependsOn:
      - APIGatewayMethod
      # Why? IAM ROLE is Created First. DynamoDBTable Second. Lambda Third. 
      # APIGatewayRestAPI Fourth. APIGatewayResource Fith. 
      # APIGatewayMethod Sixth. APIGatewayDeployment Seventh.


  APIGatewayPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: 
        - Fn::GetAtt:
          - LambdaFunction
          - Arn
      Principal: apigateway.amazonaws.com
    DependsOn:
      - APIGatewayDeployment
      # Why? IAM ROLE is Created First. DynamoDBTable Second. Lambda Third. 
      # APIGatewayRestAPI Fourth. APIGatewayResource Fith. 
      # APIGatewayMethod Sixth. APIGatewayDeployment Seventh.
      # APIGatewayPermission Eighth.

  # Created First
  IAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: Policy_api-lambda-db
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:BatchGetItem'
                  - 'dynamodb:BatchWriteItem'
                  - 'dynamodb:TagResource'
                  - 'dynamodb:UntagResource'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:Query'
                  - 'dynamodb:UpdateItem'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:CreateLogGroup'
                  - 'logs:PutLogEvents'
                Resource: '*'
              # - Effect: Allow
              #   Action:
              #     - 'xray:*'
              #   Resource: '*'